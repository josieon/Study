1. 선택 정렬(Selection Sort) 	Time Complexity: O(n^2)	Space Complexity: O(n)
	1) 인덱스의 가장 앞에서부터, 그 이후의 배열값 중 가장 작은 값을 찾는다.
	2) 가장 작은 값을 찾으면, 그 값을 현재 인덱스의 값과 바꿔준다.
	3) 다음 인덱스에서 위 과정을 반복해준다.
2. 삽입 정렬(Insertion Sort)	Time Complexity: O(n^2)~O(n): 이미 정렬된 경우	Space Complexity: O(n)
	1) 두 번째 인덱스부터 시작한다. 현재 인덱스는 별도의 변수에 저장해주고, 비교 인덱스를 현재 인덱스 -1로 잡는다.
	2) 별도로 저장해 둔 삽입을 위한 변수와, 비교 인덱스의 배열 값을 비교한다.
	3) 삽입 변수의 값이 더 작으면 현재 인덱스로 비교 인덱스의 값을 저장해주고, 비교 인덱스를 -1하여 비교를 반복한다.
	4) 만약 삽입 변수가 더 크면, 비교 인덱스+1에 삽입 변수를 저장한다.
	예시)	for(int i=1; i<v.size(); i++){
			int key = v[i], j = i-1;
			while(j>=0 && key < v[j]){
				swap(v[j],v[j+1])
				j--;
			}
			v[j+1] = key;
		}
3. 버블 정렬(Bubble Sort)	Time Complexity: O(n^2)	Space Complexity: O(n)
	1) 삽입 정렬은 두 번째 인덱스부터 시작한다. 현재 인덱스 값과, 바로 이전의 인덱스 값을 비교한다.
	2) 만약 이전 인덱스가 더 크면, 현재 인덱스와 바꿔준다.
	3) 현재 인덱스가 더 크면, 교환하지 않고 다음 두 연속된 배열값을 비교한다.
	4) 이를 (전체 배열의 크기 - 현재까지 순환한 바퀴 수)만큼 반복한다.
	예시)	for(int i=0; i<v.size()-1; i++{
			for(int j=1; j<v.size()-i; j++){
				if(v[j-1] > v[j])
					swap(v[j-1] , v[j])
4. 합병 정렬(Merge Sort)	Time Complexity: O(NlogN)	Space Complexity: O(2n)
	1) 현재 배열을 반으로 쪼갠다. 배열의 시작 위치와, 종료 위치를 입력받아 둘을 더한 후 2를 나눠 그 위치를 기준으로 나눈다.
	2) 이를 쪼갠 배열의 크기가 0이거나 1일때까지 반복한다.

	1) 두 배열 A,B의 크기를 비교한다. 각각의 배열의 현재 인덱스를 i, j로 가정하자.
	2) i에는 A배열의 시작 인덱스를 저장하고, j에는 B배열의 시작 주소를 저장한다.
	3) A[i]와 B[j]를 비교한다. 오름차순의 경우 이중에 작은 값을 새 배열 C에 저장한다.
	    A[i]가 더 컸다면 A[i]의 값을 배열 C에 저장해주고, i의 값을 하나 증가시켜준다
	4) 이를 i나 j 둘 중 하나가 각자 배열의 끝에 도달할 때까지 반복한다.
	5) 끝까지 저장을 못한 배열의 값을, 순서대로 전부 다 C에 저장한다.
	6) C 배열을 원래의 배열에 저장해준다.
	예시)
	void merge(vector<int>& v, int s, int e, int m){
		vertor<int> ret;
		int i =s; j = m+1; copy = 0;
		while(i <= m && j <= e){
			if(v[i] < v[j])
				ret.push_back(v[i++]);
			else if(v[i] > v[j])
				ret.push_back(v[j++]);
		}
		while (i <= m)
			ret.push_back(v[i++]);
		while(j <= e)
			ret.push_back(v[j++]);
		for(int k = s; k<= e; k++)
			v[k] = ret[copy++];
	}
	
	void mergeSort(vector<int>& v, int s, int e){
		if(s < e){
			int m = (s+e)/2;
			mergeSort(v,s,m);
			mergeSort(v,m+1,e);
			merge(v,s,e,m);
		}
	}
5. 퀵 정렬(Quick Sort)	Time Complexity: O(NlogN)~O(N^2): 이미 정렬된 배열의 경우	Space Complexity: O(n)
	1) pivot point로 잡을 배열의 값 하나를 정한다. 보통 맨 앞이나 맨 뒤, 혹은 전체 배열 값 중 중간값이나 랜덤 값으로 정한다.
	2) 분할을 진행하기에 앞서서, 가장 왼쪽 배열의 인덱스를 저장하는 left변수, 가장 오른쪽 배열의 인덱스를 저장하는 rigth변수를 생성한다.
	3) right부터 비교를 진행한다. 비교는 right가 left보다 클 때만 반복하며, 비교한 배열값이 pivot point보다 크면 right를 하나 감소시키고 비교를 반복한다.
	  pivot point보다 작은 배열 값을 찾으면, 반복을 중지한다.
	4) 그 다음 left부터 비교를 진행한다. 비교는 right가 left보다 클 때만 반복하며, 비교한 배열값이 pivot point보다 작으면 left를 하나 증가시키고 비교를 반복한다.
	  pivot point보다 큰 배열 값을 찾으면, 반복을 중지한다.
	5) left 인덱스의 값과 right 인덱스의 값을 바꿔준다.
	6) 3,4,5 과정을 left < right가 만족할때까지 반복한다.
	7) 위 과정이 끝나면 left의 값과 pivot point를 바꿔준다.
	8) 맨 왼쪽부터 left - 1 까지, left + 1부터 맨 오른쪽까지로 나눠 퀵 정렬을 반복한다.
	예시)qsort(vector<int>& v, int s, int e){
		int pivot = v[s];
		int bs = s, be = e;
		while(s<e){
			while(pivot <= v[e] && s < e)
				e--;
			if( s > e )
				break;
			while(pivot >= v[s] && s < e)
				s++;
			if( s > e )
				break;
			swap(v[s] , v[e]);
		}
		swap(v[bs], v[s]);
		if(bs < s)
			qsort(v, bs, s-1);
		if(be > e)
			qsort(v, s+1, be);
	}