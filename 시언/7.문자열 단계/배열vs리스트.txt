Array(배열)
	- index와 값의 쌍으로 구성되어있다.
	- index는 값에 대한 식별자이다.
	- 연속된 메모리의 공간으로 이루어져 있다.
	- 정적할당이므로 길이를 바꿀 수 없다.
	장점
		인덱스를 통한 검색이 용이함.
		연속적이므로 메모리 관리가 편하다.
	단점
		크기가 고정되어 있어서 어떤 엘리먼트가 삭제되면 빈 공간으로 남겨두어 메모리 낭비가 됨
		정적이므로 사이즈를 컴파일 이전에 정해주어야 한다.

List
	- 리스트는 순서가 있는 엘리먼트의 모임으로 배열과는 다르게 빈 엘리먼트는 절대 허용하지 않는다.
	- 인덱스라는 배열의 장점을 버리고 빈틈없는 데이터의 적재라는 장점을 취함
	- 리스트에서 인덱스는 몇 번째 데이터인가 정도의 의미를 가진다.
	- 불연속적인 메모리 공간을 차지한다.
	- 포인터를 통한 접근
	장점
		포인터를 통하여 다음 데이터의 위치를 가르키고 있어 삽입 삭제에 용이.
		동적이므로 크기가 정해져 있지 않고 메모리 재사용이 편리하다
	단점
		검색 성능이 좋지 않다. (5번째 엘리먼트 검색 시 포인터로 1번째 엘리먼트부터 따라가야함)
		포인터를 통해 다음 데이터를 가리키므로 추가적인 메모리 공간 발생.
	종류
	ArrayList : 인덱스로 객체 관리(배열) + 크기 동적 할당(리스트) (사이즈 초과시 1.5배로 증가)
		객체가 삽입, 삭제될 때마다 데이터가 이동하므로 비효율적이다.
		기본타입(primitive type)은 안되고 객체(object)만 가능하다.
		조회, 검색이 빠르고 삽입, 삭제는 비효율적이다.
	LinkedList : ArrayList나 배열과는 다르게 인덱스가 몇 번째 데이터인지 순서를 의미한다.(사실 다음 노드의 포인터만 가지고 있어서 인덱스가 없는 것이다)
		검색을 위해서는 포인터를 따라가야하므로 O(n)의 Time Complexitiy가 발생(순차접근만 가능)
		삽입, 삭제가 효율적이다.
	Vector : ArrayList와 동일한 내부 구조.(사이즈 초과시 2배로 증가)
		동기화된 메소드로 구성되어 있기 때문에 멀티 스레드가 동시에 Vector의 메소드를 실행할 수 없다. > 멀티 스레드 환경에서 안전하게 객체를 추가, 삭제할 수 있다.(스레드에 안전하다)